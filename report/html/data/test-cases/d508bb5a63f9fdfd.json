{
  "uid" : "d508bb5a63f9fdfd",
  "name" : "num为负数",
  "fullName" : "test_case.test_add_cart.TestAddCart#test_add_cart",
  "historyId" : "d4d859d0e53b3657b62956cca297c31c",
  "time" : {
    "start" : 1652186463101,
    "stop" : 1652186463309,
    "duration" : 208
  },
  "status" : "broken",
  "statusMessage" : "AttributeError: module pytest has no attribute assume",
  "statusTrace" : "self = <test_add_cart.TestAddCart object at 0x7fe36c176650>\ncase_name = 'num为负数', sku_id = 5173, num = -1, expect_status_code = 400\nexpect_business_code = '\"004\"', expect_message = '加入购物车数量必须大于0'\n\n    @allure.story('添加购物车接口异常测试')\n    @allure.title('{case_name}')\n    @pytest.mark.parametrize('case_name,sku_id,num,expect_status_code,expect_business_code,expect_message', test_data)\n    def test_add_cart(self, case_name, sku_id, num, expect_status_code, expect_business_code, expect_message):\n        token = user_api.get_token({\n            'username': 'shamo',\n            'password': 'e10adc3949ba59abbe56e057f20f883e',\n            'captcha': '1512'\n        })\n        commons.logger.GetLogger().get_logger().info('请求sku:{0},请求num：{1}'.format(sku_id, num))\n        resp = order_api.OrderAPi(token=token).add_carts({'sku_id': sku_id, 'num': num})\n        # print('res',resp.text)\n        # resp = order_api.add_carts({'sku_id': sku_id, 'num': num}, token)\n        status_code = resp.status_code\n        assert status_code == expect_status_code\n        print(resp.text)  # 由于响应信息可能为空，所以我们使用resp.text打印结果，因为空的字符串是无法使用resp.json()去获取的\n        # 注意这个接口如果业务正常成功，那么响应信息是空的\n        if status_code != 200:\n            # 状态码不是200时，才进行响应信息的校验\n            try:\n                resp_json = resp.json()\n            except:\n                pass\n            code = resp_json['code']\n            # assert code == expect_busi_code\n    \n>           pytest.assume(code == expect_business_code.replace('\"', ''))\n\ntest_case/test_add_cart.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'assume'\n\n    def __getattr__(name: str) -> object:\n        if name == \"Instance\":\n            # The import emits a deprecation warning.\n            from _pytest.python import Instance\n    \n            return Instance\n>       raise AttributeError(f\"module {__name__} has no attribute {name}\")\nE       AttributeError: module pytest has no attribute assume\n\n../../../.conda/envs/ShopTest/lib/python3.10/site-packages/pytest/__init__.py:165: AttributeError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "AttributeError: module pytest has no attribute assume",
    "statusTrace" : "self = <test_add_cart.TestAddCart object at 0x7fe36c176650>\ncase_name = 'num为负数', sku_id = 5173, num = -1, expect_status_code = 400\nexpect_business_code = '\"004\"', expect_message = '加入购物车数量必须大于0'\n\n    @allure.story('添加购物车接口异常测试')\n    @allure.title('{case_name}')\n    @pytest.mark.parametrize('case_name,sku_id,num,expect_status_code,expect_business_code,expect_message', test_data)\n    def test_add_cart(self, case_name, sku_id, num, expect_status_code, expect_business_code, expect_message):\n        token = user_api.get_token({\n            'username': 'shamo',\n            'password': 'e10adc3949ba59abbe56e057f20f883e',\n            'captcha': '1512'\n        })\n        commons.logger.GetLogger().get_logger().info('请求sku:{0},请求num：{1}'.format(sku_id, num))\n        resp = order_api.OrderAPi(token=token).add_carts({'sku_id': sku_id, 'num': num})\n        # print('res',resp.text)\n        # resp = order_api.add_carts({'sku_id': sku_id, 'num': num}, token)\n        status_code = resp.status_code\n        assert status_code == expect_status_code\n        print(resp.text)  # 由于响应信息可能为空，所以我们使用resp.text打印结果，因为空的字符串是无法使用resp.json()去获取的\n        # 注意这个接口如果业务正常成功，那么响应信息是空的\n        if status_code != 200:\n            # 状态码不是200时，才进行响应信息的校验\n            try:\n                resp_json = resp.json()\n            except:\n                pass\n            code = resp_json['code']\n            # assert code == expect_busi_code\n    \n>           pytest.assume(code == expect_business_code.replace('\"', ''))\n\ntest_case/test_add_cart.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nname = 'assume'\n\n    def __getattr__(name: str) -> object:\n        if name == \"Instance\":\n            # The import emits a deprecation warning.\n            from _pytest.python import Instance\n    \n            return Instance\n>       raise AttributeError(f\"module {__name__} has no attribute {name}\")\nE       AttributeError: module pytest has no attribute assume\n\n../../../.conda/envs/ShopTest/lib/python3.10/site-packages/pytest/__init__.py:165: AttributeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "75eafcefa9073255",
      "name" : "log",
      "source" : "75eafcefa9073255.txt",
      "type" : "text/plain",
      "size" : 81
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "添加购物车接口异常测试"
  }, {
    "name" : "parentSuite",
    "value" : "test_case"
  }, {
    "name" : "suite",
    "value" : "test_add_cart"
  }, {
    "name" : "subSuite",
    "value" : "TestAddCart"
  }, {
    "name" : "host",
    "value" : "localhost"
  }, {
    "name" : "thread",
    "value" : "17855-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.test_add_cart"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "case_name",
    "value" : "'num为负数'"
  }, {
    "name" : "expect_business_code",
    "value" : "'\"004\"'"
  }, {
    "name" : "expect_message",
    "value" : "'加入购物车数量必须大于0'"
  }, {
    "name" : "expect_status_code",
    "value" : "400"
  }, {
    "name" : "num",
    "value" : "-1"
  }, {
    "name" : "sku_id",
    "value" : "5173"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "d508bb5a63f9fdfd.json",
  "parameterValues" : [ "'num为负数'", "'\"004\"'", "'加入购物车数量必须大于0'", "400", "-1", "5173" ]
}